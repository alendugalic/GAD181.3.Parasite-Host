//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputActions/PlayersInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayersInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayersInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersInputActions"",
    ""maps"": [
        {
            ""name"": ""Player-Host"",
            ""id"": ""0aaa0caa-a236-444e-ac87-45d447e5ebf4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""10ef3e98-6156-4600-bb11-34bc611b8564"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""0f63c4a9-f393-4d57-a8f2-97b5ce9a7b3f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c4dba8b8-f087-4199-a8e7-12549c7e0e92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""8ab122d2-5079-4f70-bc65-288fbebcd16e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""2df5e1f8-7362-4b21-aac5-bdf696c72636"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AreaBlock"",
                    ""type"": ""Button"",
                    ""id"": ""4ca45a11-18e7-4113-bf2e-9d7143adf50f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TargetLock"",
                    ""type"": ""Button"",
                    ""id"": ""f210670b-3fb7-404a-aab4-4c64f8e25d9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Eat"",
                    ""type"": ""Button"",
                    ""id"": ""3c02a4aa-0a4f-4e09-b2da-6d5ad1e10fe7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SuperJump"",
                    ""type"": ""Button"",
                    ""id"": ""2d4ad5a6-38c3-4007-9bdb-ff4f49eaff3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""31c67684-a96e-4139-adb4-7baecb79ef16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""d3025ee6-4232-427a-864b-27d0e8b1db24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c5212e5-c944-4f22-bcfe-fc962b434851"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52190b08-377e-44d3-9cbb-a890e062eecd"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d42e9ca9-3aff-4188-a028-7c8b54060beb"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c164a050-5e06-456c-a9e8-81b1c1863b5b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51ffa070-017a-498c-ba39-9df6bc17983a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ac7906b-3f09-4ca7-8d34-fc1123395cbd"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector[WASD]"",
                    ""id"": ""596337f7-ac5d-4978-9a6d-8a0ab3405fb2"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""58285e12-36a2-44fb-a25e-22625b5de997"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""962de2a9-1032-4fa4-b7c0-a8824be6ba4d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a06bd428-0137-49fd-a595-c9749e9d23bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""39677ac9-a87a-44e1-b8a8-5b58738ecdbd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""16f8f060-5e08-456a-a42b-b2b0029b1ef2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone,NormalizeVector2"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81b2a07e-7bce-4c5f-8b68-1fa0a053656b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cc46f4d-6d4e-4440-85e0-fc869446c996"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SuperJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c92cd3-4c28-44c5-8fcb-a23fb0beb8cc"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b575ad25-2df0-415f-b708-13698a99a38c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac7067f6-b592-44b8-bcb4-e7d2cfe28ab9"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""bb7195df-3db5-444a-8672-2b05280eb5ee"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""a6d8a0c9-e680-4a72-b55c-c807371ffc1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""910e0115-b76e-4370-8d6c-319b251bc069"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player-Host
        m_PlayerHost = asset.FindActionMap("Player-Host", throwIfNotFound: true);
        m_PlayerHost_Move = m_PlayerHost.FindAction("Move", throwIfNotFound: true);
        m_PlayerHost_Look = m_PlayerHost.FindAction("Look", throwIfNotFound: true);
        m_PlayerHost_Attack = m_PlayerHost.FindAction("Attack", throwIfNotFound: true);
        m_PlayerHost_HeavyAttack = m_PlayerHost.FindAction("HeavyAttack", throwIfNotFound: true);
        m_PlayerHost_Block = m_PlayerHost.FindAction("Block", throwIfNotFound: true);
        m_PlayerHost_AreaBlock = m_PlayerHost.FindAction("AreaBlock", throwIfNotFound: true);
        m_PlayerHost_TargetLock = m_PlayerHost.FindAction("TargetLock", throwIfNotFound: true);
        m_PlayerHost_Eat = m_PlayerHost.FindAction("Eat", throwIfNotFound: true);
        m_PlayerHost_SuperJump = m_PlayerHost.FindAction("SuperJump", throwIfNotFound: true);
        m_PlayerHost_Jump = m_PlayerHost.FindAction("Jump", throwIfNotFound: true);
        m_PlayerHost_Sprint = m_PlayerHost.FindAction("Sprint", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player-Host
    private readonly InputActionMap m_PlayerHost;
    private List<IPlayerHostActions> m_PlayerHostActionsCallbackInterfaces = new List<IPlayerHostActions>();
    private readonly InputAction m_PlayerHost_Move;
    private readonly InputAction m_PlayerHost_Look;
    private readonly InputAction m_PlayerHost_Attack;
    private readonly InputAction m_PlayerHost_HeavyAttack;
    private readonly InputAction m_PlayerHost_Block;
    private readonly InputAction m_PlayerHost_AreaBlock;
    private readonly InputAction m_PlayerHost_TargetLock;
    private readonly InputAction m_PlayerHost_Eat;
    private readonly InputAction m_PlayerHost_SuperJump;
    private readonly InputAction m_PlayerHost_Jump;
    private readonly InputAction m_PlayerHost_Sprint;
    public struct PlayerHostActions
    {
        private @PlayersInputActions m_Wrapper;
        public PlayerHostActions(@PlayersInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerHost_Move;
        public InputAction @Look => m_Wrapper.m_PlayerHost_Look;
        public InputAction @Attack => m_Wrapper.m_PlayerHost_Attack;
        public InputAction @HeavyAttack => m_Wrapper.m_PlayerHost_HeavyAttack;
        public InputAction @Block => m_Wrapper.m_PlayerHost_Block;
        public InputAction @AreaBlock => m_Wrapper.m_PlayerHost_AreaBlock;
        public InputAction @TargetLock => m_Wrapper.m_PlayerHost_TargetLock;
        public InputAction @Eat => m_Wrapper.m_PlayerHost_Eat;
        public InputAction @SuperJump => m_Wrapper.m_PlayerHost_SuperJump;
        public InputAction @Jump => m_Wrapper.m_PlayerHost_Jump;
        public InputAction @Sprint => m_Wrapper.m_PlayerHost_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHost; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHostActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerHostActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerHostActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerHostActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
            @AreaBlock.started += instance.OnAreaBlock;
            @AreaBlock.performed += instance.OnAreaBlock;
            @AreaBlock.canceled += instance.OnAreaBlock;
            @TargetLock.started += instance.OnTargetLock;
            @TargetLock.performed += instance.OnTargetLock;
            @TargetLock.canceled += instance.OnTargetLock;
            @Eat.started += instance.OnEat;
            @Eat.performed += instance.OnEat;
            @Eat.canceled += instance.OnEat;
            @SuperJump.started += instance.OnSuperJump;
            @SuperJump.performed += instance.OnSuperJump;
            @SuperJump.canceled += instance.OnSuperJump;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IPlayerHostActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
            @AreaBlock.started -= instance.OnAreaBlock;
            @AreaBlock.performed -= instance.OnAreaBlock;
            @AreaBlock.canceled -= instance.OnAreaBlock;
            @TargetLock.started -= instance.OnTargetLock;
            @TargetLock.performed -= instance.OnTargetLock;
            @TargetLock.canceled -= instance.OnTargetLock;
            @Eat.started -= instance.OnEat;
            @Eat.performed -= instance.OnEat;
            @Eat.canceled -= instance.OnEat;
            @SuperJump.started -= instance.OnSuperJump;
            @SuperJump.performed -= instance.OnSuperJump;
            @SuperJump.canceled -= instance.OnSuperJump;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IPlayerHostActions instance)
        {
            if (m_Wrapper.m_PlayerHostActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerHostActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerHostActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerHostActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerHostActions @PlayerHost => new PlayerHostActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Submit;
    public struct UIActions
    {
        private @PlayersInputActions m_Wrapper;
        public UIActions(@PlayersInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerHostActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnAreaBlock(InputAction.CallbackContext context);
        void OnTargetLock(InputAction.CallbackContext context);
        void OnEat(InputAction.CallbackContext context);
        void OnSuperJump(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSubmit(InputAction.CallbackContext context);
    }
}
